形狀表示

形狀表示的要求 : 一個良好的形狀表示方法，應該要對旋轉（Rotation）、縮放（Scaling）、平移（Translation）具備不變性（Invariance）。這種特性稱為 RST 不變性（RST Invariance）。

形狀表示分成二大類 :
	
    1. 基於輪廓(Contour-based)

	=> 紀錄物件輪廓點(或近似輪廓)的資訊物件外輪廓

    2. 基於區域(Region-based)

	=> 紀錄物件內部像素點的資訊

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

基於輪廓的特徵表示法 :
	
    1. Chain Code (鏈碼) : 特定長度及方向的直線段來表示輪廓

    2. Shape Signature (形狀) : 將輪廓邊界表示轉成 1D 函數

從輪廓中可以提取出許多常用的特徵，包括：

	=> 面積(Area)：輪廓所包圍的像素總數。

	=> 周長(Perimeter)：輪廓的總長度。

	=> 質心(Centroid)：輪廓的幾何中心，輪廓所有(x,y) 座標的平均值。

	=> 外接矩形(Bounding box)：完全包圍輪廓的最小矩形。

	=> 最小外接圓：完全包圍輪廓的最小圓。

	=> 長寬比(Aspect ratio)：外接矩形的寬度與高度的比值。

	=> 延伸度(Extent)：輪廓面積與外接矩形面積的比值，可以用來判斷輪廓與外接矩形的契合度。

這些輪廓特徵可以用來從圖像中提取有意義的信息，例如物體的大小、形狀和方向。它們也可以用於機器學習算法中，用來分類或識別圖像中的物體。


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 計算輪廓面積
# area = cv2.contourArea(contour, oriented) 
	
	=> contour 輪廓點組成的陣列，通常來自 cv2.findContours() 
	
	=> oriented布林值（預設為 False），表示是否考慮方向性面積（有正負號）

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 計算輪廓周長
# length = cv2.arcLength(contour, closed)

	=> contour 輪廓點組成的陣列，通常來自 cv2.findContours() 
	
	=> closed True 表示是封閉輪廓（例如圓形、矩形），False 表示是開放曲線（例如折線）

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------















































